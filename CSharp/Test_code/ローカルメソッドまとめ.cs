using System;
namespace ローカルメソッド{
    
    //デリゲート型で変数にメソッドを束縛するとメソッド内で使われる変数(オブジェクト)はメソッドを束縛した変数の
    //寿命が終わるまでメソッド内で使われる変数の寿命が伸びてしまう。(ローカル変数はクラスのフィールドに昇格する)
    
    //ローカルメソッドは∫イ/静∫(書かなくても自動的に決定される)、アクセスなし
    //よってラムダ式でもローカルメソッドと大体おなじ振る舞い
    
    public class Class{
        //====================================================================================
        class キャプチャなし{
            public void Method0(){
                NoCap();
                int num = 123;
                /*％❰static❱*/ void NoCap(){
                    int n = 4;
                    int num = 123; //シャドーイング(8.0)外の識別子と同名の識別子を定義すると別々の識別子になる
                }
            }
            //↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕単に静的メソッドを中に入れただけ↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕
            public void Method0_(){
                NoCap_();
            }
            internal static void NoCap_(){
                int n_ = 4;
            }
        }
        //====================================================================================
        class フィールドメンバのキャプチャ{
            public int n = 2;
            public void Method1(){
                Field();
                /*not❰static❱*/ void Field(){//staticを明示的に付けると静的ローカルメソッドと言って、
                    n = 4;                  //静的メンバ変数以外のキャプチャを明示的に禁止することができる
                }                           //(オブジェクトの寿命を伸ばさない)
            }
            //↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕単にインスタンスメソッドを中に入れただけ↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕
            public int n_ = 2;
            public void Method1_(){
                Field_();
            }
            private void Field_(){
                n_ = 4;
            }
        }
        //====================================================================================
        class ローカル変数のキャプチャ{
            public Action Method2(){
                int n = 3;
                LocVal();
                return LocVal;
                /*not❰static❱*/ void LocVal(){
                    n = 4;
                }
            }
            //↕↕↕↕↕↕↕↕ローカル変数の状態をブロックから抜けても保持するため、ローカル変数とローカルメソッドを
            //クラスを作ってそのインスタンスを生成してインスタンス経由でローカル変数を扱う↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕↕
            private sealed class Display{    //後、フィールドメンバも使うとクラスはthisも持つ
                public int n;
                internal void LocVal_(){
                    n = 4;
                }
            }
            public Action Method2_(){
                Display disp = new Display();
                disp.n = 3;
                disp.LocVal_();
                return new Action(disp.LocVal_);
            }
        //====================================================================================
        }
    }
}
    